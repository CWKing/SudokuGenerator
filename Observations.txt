Definitions:
	Cell- A data structure which houses several important pieces of information: a NUMBER, a COLUMN INDEX, a ROW INDEX, a BLOCK INDEX, an ARRAY OF POTENTIAL NUMBERS, and a BOOL OF NECESSITY
	Grid- A container which houses 81 Cells, arranged in nine rows and nine columns
	Forcing states- States of the Grid which force a change in one or more cells; these will be described in more detail later as they are important and annoying
	Family- An abstraction of a set of cells (all the cells in a column, row, or block) which influence the potentials in all other cells in the same family

Forcing states, a more in depth analysis:
	Forcing states, or more specifically the identification of, are going to be the major driving force behind generating consistent, solvable sudoku puzzles.
	Forcing states come in two varieties which can be further divided in sub varieties should we choose to be pedantic; of the two main variety, they are: Forcing States of Number (FSoN) and Forcing States of Potentials (FSoP).
	FSoNs are those grid states which force a cell to take a particular number. They are generally easy to identify and handle and have (to my knowledge) been solved in all implementations of my attempts to generate sudoku puzzles in the past. The most iconic FSoN is that of a cell which has only one potential value it can contain, and so it is /forced/ to take that value. A less iconic and, in my case, initially overlooked FSoN is that of a cell in a family of cells which, though has more than one potential number, is the only cell in that family which can hold a particular number, and so is forced to take said number.
	FSoP are those grid states which force one or more cells to evict a potential number or potential numbers from its or their pool of potentials. While the most trivial cases are beyond simple to identify and handle, it is a set of these forcing states which I have most recently identified as likely to be the problem as to why my most recent implementation has failed. The trivialiest of trivial FSoP is that in which cells in a family collectively lose a potential number N because a cell in that family has taken the number N. An exceptionally less trivial and the most likely candidate for what has been going wrong is the FSoP in which a subfamily of 1<K<9 cells each contain the exact same K potentials, in which case the remaining cells in the family which contain said subfamily lose those K potentials (the proof of this is easily done by contradiction: if we assume that outside this subfamily in the containing family, a cell takes one of those specific K potentials, then the K cells in that subfamily lose that potential, giving us K cells which collectively need to contain K-1 distinct elements, which isn't possible because of pigeons and holes and stuff; ie, you can't distribute more elements than you have without repeating one.
	
	+---------+---------+---------+
	|[0][0][0]|[0][0][0]|[0][0][0]|
	|[0][0][0]|[0][0][0]|[0][0][0]|
	|[0][0][0]|[0][0][0]|[0][0][0]|
	+---------+---------+---------+
	|[0][0][0]|[0][0][0]|[0][0][0]|
	|[0][0][0]|[0][0][0]|[0][0][0]|
	|[0][0][0]|[0][0][0]|[0][0][0]|
	+---------+---------+---------+
	|[0][0][0]|[0][0][0]|[0][0][0]|
	|[0][0][0]|[0][0][0]|[0][0][0]|
	|[0][0][0]|[0][0][0]|[0][0][0]|
	+---------+---------+---------+
	
Different FSoP and an attempt to explain them:
	Family exclusion- A cell loses a potential because another cell in that family takes a number; potential lost is that number.
	Symmetric lock- A cell loses one or more potentials because N cells, excluding it, in its family each contain the exact same N potentials; potentials lost are those N potentials.
	Asymmetric lock- A cell loses one or more potentials because N cells, excluding it, in its family