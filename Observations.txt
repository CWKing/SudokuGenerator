Definitions:
	Cell- A data structure which houses several important pieces of information: a NUMBER, a COLUMN INDEX, a ROW INDEX, a BLOCK INDEX, an ARRAY OF POTENTIAL NUMBERS, and a BOOL OF NECESSITY.
	Grid- A container which houses 81 Cells, arranged in nine rows and nine columns.
	Forcing states- States of the Grid which force a change in one or more cells; these will be described in more detail later as they are important and annoying.
	Family- An abstraction of a set of cells (all the cells in a column, row, or block) which influence the potentials in all other cells in the same family.
	Subfamily- A collection of cells from the same family which, when taken together, cause the exclusion of their potentials from other cells in the same family. Identifying subfamilies is an important aspect of tackling FSoP, which has been incredibly hard thus far.

Forcing states, a more in depth analysis:
	Forcing states, or more specifically the identification of, are going to be the major driving force behind generating consistent, solvable sudoku puzzles.
	Forcing states come in two varieties which can be further divided in sub varieties should we choose to be pedantic; of the two main variety, they are: Forcing States of Number (FSoN) and Forcing States of Potentials (FSoP).
	FSoNs are those grid states which force a cell to take a particular number. They are generally easy to identify and handle and have (to my knowledge) been solved in all implementations of my attempts to generate sudoku puzzles in the past. The most iconic FSoN is that of a cell which has only one potential value it can contain, and so it is /forced/ to take that value. A less iconic and, in my case, initially overlooked FSoN is that of a cell in a family of cells which, though has more than one potential number, is the only cell in that family which can hold a particular number, and so is forced to take said number.
	FSoP are those grid states which force one or more cells to evict a potential number or potential numbers from its or their pool of potentials. While the most trivial cases are beyond simple to identify and handle, it is a set of these forcing states which I have most recently identified as likely to be the problem as to why my most recent implementation has failed. The trivialiest of trivial FSoP is that in which cells in a family collectively lose a potential number N because a cell in that family has taken the number N. An exceptionally less trivial and the most likely candidate for what has been going wrong is the FSoP in which a subfamily of 1<K<9 cells each contain the exact same K potentials, in which case the remaining cells in the family which contain said subfamily lose those K potentials (the proof of this is easily done by contradiction: if we assume that outside this subfamily in the containing family, a cell takes one of those specific K potentials, then the K cells in that subfamily lose that potential, giving us K cells which collectively need to contain K-1 distinct elements, which isn't possible because of pigeons and holes and stuff; ie, you can't distribute more elements than you have without repeating one.)
	
	+---------+---------+---------+
	|[0][0][0]|[0][0][0]|[0][0][0]|
	|[0][0][0]|[0][0][0]|[0][0][0]|
	|[0][0][0]|[0][0][0]|[0][0][0]|
	+---------+---------+---------+
	|[0][0][0]|[0][0][0]|[0][0][0]|
	|[0][0][0]|[0][0][0]|[0][0][0]|
	|[0][0][0]|[0][0][0]|[0][0][0]|
	+---------+---------+---------+
	|[0][0][0]|[0][0][0]|[0][0][0]|
	|[0][0][0]|[0][0][0]|[0][0][0]|
	|[0][0][0]|[0][0][0]|[0][0][0]|
	+---------+---------+---------+
	
Different FSoP and an attempt to explain them:
	Family exclusion- A cell loses a potential because another cell in that family takes a number; potential lost is that number.
	Subfamily lock- A cell loses one or more potentials because N cells, excluding it, in its family form a subfamily. The potentials lost are the accumulative potentials of these N cells.

Identifying Subfamily locks:
	It appears to be the case, but it is not proven, that if you have a set of 1<k<9 cells, piece-wise sum their potentials (assuming the potentials are given by a container of int-like data-types), and receive a list that contains no 1's, contains 9-k 0's (or k non-zeros), and (though this should never happen) no number greater than k, then this set of k cells forms a subfamily.

	ex. We will use the letters a, b, and c to show all the possible distinct subfamilies of both 2 cells and 3 cells ([a b c] will denote a cell with potentials a, b, and c);

	2-cell subfamily: ([a b], [a b]) This is the only sub-family type for two cells. If one were to add the potentials piecewise of these two cells, one would get two 2's, and seven 0's. (If we were to say that the sequence 1 1 1 0 0 0 0 0 denotes a cell having potentials 1, 2, and 3, and suppose a=1, b=2, and c=3, then we would have: 
	1 1 0 0 0 0 0 0 0 + 1 1 0 0 0 0 0 0 0 = 2 2 0 0 0 0 0 0 0)
		([a b c], [a b]) does not form a 2-cell subfamily as the piecewise sum of potentials both contains a 1 (from the single c) and more non-zeros than cells (Similar as above, we would have: 1 1 1 0 0 0 0 0 0 + 1 1 0 0 0 0 0 0 0 = 2 2 1 0 0 0 0 0 0)

	3-cell subfamilies: ([a b c], [a b c], [a b c]), ([a b c], [a b c], [a b]), ([a b c], [a b], [a c]), ([a b], [b c], [a c]) (3 3 3; 3 3 2; 3 2 2; 2 2 2 (0's suppressed))

	This pattern appears to hold with 4-cell subfamilies, but the same sequence of integers is not unique, ex:
		([a b c d], [a b c d], [a b c d], [a b]) & ([a b c d], [a b c d], [a b c], [a b d]) have the same sequence (up to ordering) but aren't identical (both are 4 4 3 3)

	Under the assumption this pattern holds, we will call the sequence created from the piecewise sum of the potentials of a set of k cells the set's SIGNATURE. To identify a subfamily, we need to check in each family every possible set (up to ordering) of cells and from each set, if its signature matches that of a subfamily. Once a subfamily has been identified, we will need to have information regarding what family the subfamily resides in, and the cells which comprise the subfamily so that we may perform the proper potential exclusion from the remaining cells in the family.

Each k-subfamily will have 9_Choose_k total combinations
For a cell with family index I, the number of combinations with it as the starting element in a k-subfamily is (9-I)_choose_k

2-Subfamily groupings:
01 02 03 04 05 06 07 08		8 pairs 8_choose_1
12 13 14 15 16 17 18		7		7_choose_1
23 24 25 26 27 28			6
34 35 36 37 38				5
45 46 47 48					4
56 57 58					3
67 68						2
78							1
depth is 8; total pairs is 36 (9_choose_2)

3-Subfamily groupings:
012 013 014 015 016 017 018 023 024 025 026 027 028 034 035 036 037 038 045 046 047 048 056 057 058 067 068 078		28 triplets 8_choose_2
123 124 125 126 127 128 134 135 136 137 138 145 146 147 148 156 157 158 167 168 178									21			7_choose_2
234 235 236 237 238 245 246 247 248 256 257 258 267 268 278															15
345 346 347 348 356 357 358 367 368 378																				10
456 457 458 467 468 478																								6
567 568 578																											3
678																													1
depth is 7; total triplets is 84 (9_choose_3)

4-Subfamily groupings:
0123 0124 0125 0126 0127 0128 0134 0135 0136 0137 0138 0145 0146 0147 0148 0156 0157 0158 0167 0168 0178 0234 0235 0236 0237 0238 0245 0246 0247 0248 0256 0257 0258 0267 0268 0278 0345 0346 0347 0348 0356 0357 0358 0367 0368 0378 0456 0457 0458 0467 0468 0478 0567 0568 0578 0678		56 quadruplets 8_choose_3
1234 1235 1236 1237 1238 1245 1246 1247 1248 1256 1257 1258 1267 1268 1278 1345 1346 1347 1348 1356 1357 1358 1367 1368 1378 1456 1457 1458 1467 1468 1478 1567 1568 1578 1678		35		7_choose_3
2345 2346 2347 2348 2356 2357 2358 2367 2368 2378 2456 2457 2458 2467 2468 2478 2567 2568 2578 2678		20		6_choose_3
3456 3457 3458 3467 3468 3478 3567 3568 3578 3678		10
4567 4568 4578 4678		4
5678		1
depth is 6; total pairs is 126 (9_choose_4)

How do we iterate to perform the FSoP checks?
Seems conducive to a recursive function call but I can't think of exactly how to impliment it.

Since a completed sudoku puzzle contains exactly one number from 1 to 9 exactly once in each row and column, is it the case that a completed sudoku puzzle forms a "jumbled" operation table of an order 9 group? All order nine groups are isomorphic to either integers mod 9 or integers mod 3 cross integers mod 3, both of which are abelian, so maybe it's not too difficult to find out. If so, maybe use this concept to generate sudoku puzzles by re-jumbling the rows and columns, then putting the product of the rows and columns in the associated spots?

A complete sudoku from previous attempt; was successful for this particular seed (0)
+---------+---------+---------+
|[7][3][1]|[5][2][9]|[6][8][4]|
|[4][5][9]|[8][3][6]|[7][2][1]|
|[8][2][6]|[4][7][1]|[3][5][9]|
+---------+---------+---------+
|[3][6][4]|[2][1][8]|[9][7][5]|
|[5][1][7]|[6][9][3]|[8][4][2]|
|[2][9][8]|[7][4][5]|[1][6][3]|
+---------+---------+---------+
|[1][7][5]|[9][8][4]|[2][3][6]|
|[6][8][3]|[1][5][2]|[4][9][7]|
|[9][4][2]|[3][6][7]|[5][1][8]|
+---------+---------+---------+

    a  b  c  d  e  f  g  h  i
a |[7][3][1][5][2][9][6][8][4]|
i |[4][5][9][8][3][6][7][2][1]|
h |[8][2][6][4][7][1][3][5][9]|
b |[3][6][4][2][1][8][9][7][5]|
d |[5][1][7][6][9][3][8][4][2]|
e |[2][9][8][7][4][5][1][6][3]|
c |[1][7][5][9][8][4][2][3][6]|
g |[6][8][3][1][5][2][4][9][7]|
f |[9][4][2][3][6][7][5][1][8]|
  
  
  reorganizing...
    a  b  c  d  e  f  g  h  i
a |[7][3][1][5][2][9][6][8][4]|
b |[3][6][4][2][1][8][9][7][5]|
c |[1][7][5][9][8][4][2][3][6]|
d |[5][1][7][6][9][3][8][4][2]|
e |[2][9][8][7][4][5][1][6][3]|
f |[9][4][2][3][6][7][5][1][8]|
g |[6][8][3][1][5][2][4][9][7]|
h |[8][2][6][4][7][1][3][5][9]|
i |[4][5][9][8][3][6][7][2][1]|

not abelian; needs to be abelian! Bad labeling? Not defining of a group operation? Try again!

    -  -  -  -  -  -  -  -  -
- |[7][3][1][5][2][9][6][8][4]|
- |[4][5][9][8][3][6][7][2][1]|
- |[8][2][6][4][7][1][3][5][9]|
- |[3][6][4][2][1][8][9][7][5]|
- |[5][1][7][6][9][3][8][4][2]|
- |[2][9][8][7][4][5][1][6][3]|
- |[1][7][5][9][8][4][2][3][6]|
- |[6][8][3][1][5][2][4][9][7]|
- |[9][4][2][3][6][7][5][1][8]|

start with Z/9Z operation table; 9=0
    9  1  2  3  4  5  6  7  8
9 |[9][1][2][3][4][5][6][7][8]|
1 |[1][2][3][4][5][6][7][8][9]|
2 |[2][3][4][5][6][7][8][9][1]|
3 |[3][4][5][6][7][8][9][1][2]|
4 |[4][5][6][7][8][9][1][2][3]|
5 |[5][6][7][8][9][1][2][3][4]|
6 |[6][7][8][9][1][2][3][4][5]|
7 |[7][8][9][1][2][3][4][5][6]|
8 |[8][9][1][2][3][4][5][6][7]|

jumble rows so that blocks have no repetition...
    9  1  2  3  4  5  6  7  8
9 |[9][1][2][3][4][5][6][7][8]|
3 |[3][4][5][6][7][8][9][1][2]|
6 |[6][7][8][9][1][2][3][4][5]|
1 |[1][2][3][4][5][6][7][8][9]|
4 |[4][5][6][7][8][9][1][2][3]|
7 |[7][8][9][1][2][3][4][5][6]|
2 |[2][3][4][5][6][7][8][9][1]|
5 |[5][6][7][8][9][1][2][3][4]|
8 |[8][9][1][2][3][4][5][6][7]|

defines a sudoku, but its very predictable; can we make our other sudoku from this by now swapping columns?
    9  1  2  3  4  5  6  7  8			Maybe don't jumble columns first?
9 |[9][1][2][3][4][5][6][7][8]|
3 |[3][4][5][6][7][8][9][1][2]|
6 |[6][7][8][9][1][2][3][4][5]|
1 |[1][2][3][4][5][6][7][8][9]|
4 |[4][5][6][7][8][9][1][2][3]|
7 |[7][8][9][1][2][3][4][5][6]|
2 |[2][3][4][5][6][7][8][9][1]|
5 |[5][6][7][8][9][1][2][3][4]|
8 |[8][9][1][2][3][4][5][6][7]|

start with Z/9Z operation table; 9=0
    9  1  2  3  4  5  6  7  8
9 |[9][1][2][3][4][5][6][7][8]|
1 |[1][2][3][4][5][6][7][8][9]|
2 |[2][3][4][5][6][7][8][9][1]|
3 |[3][4][5][6][7][8][9][1][2]|
4 |[4][5][6][7][8][9][1][2][3]|
5 |[5][6][7][8][9][1][2][3][4]|
6 |[6][7][8][9][1][2][3][4][5]|
7 |[7][8][9][1][2][3][4][5][6]|
8 |[8][9][1][2][3][4][5][6][7]|

swap columns 9 and 7...
    7  1  2  3  4  5  6  9  8
9 |[7][1][2][3][4][5][6][9][8]|
1 |[8][2][3][4][5][6][7][1][9]|
2 |[9][3][4][5][6][7][8][2][1]|
3 |[1][4][5][6][7][8][9][3][2]|
4 |[2][5][6][7][8][9][1][4][3]|
5 |[3][6][7][8][9][1][2][5][4]|
6 |[4][7][8][9][1][2][3][6][5]|
7 |[5][8][9][1][2][3][4][7][6]|
8 |[6][9][1][2][3][4][5][8][7]|

swap columns 1 and 3...
    7  3  2  1  4  5  6  9  8
9 |[7][3][2][1][4][5][6][9][8]|
1 |[8][4][3][2][5][6][7][1][9]|
2 |[9][5][4][3][6][7][8][2][1]|
3 |[1][6][5][4][7][8][9][3][2]|
4 |[2][7][6][5][8][9][1][4][3]|
5 |[3][8][7][6][9][1][2][5][4]|
6 |[4][9][8][7][1][2][3][6][5]|
7 |[5][1][9][8][2][3][4][7][6]|
8 |[6][2][1][9][3][4][5][8][7]|

swap columns 2 and 1...
    7  3  1  2  4  5  6  9  8
9 |[7][3][1][2][4][5][6][9][8]|
1 |[8][4][2][3][5][6][7][1][9]|
2 |[9][5][3][4][6][7][8][2][1]|
3 |[1][6][4][5][7][8][9][3][2]|
4 |[2][7][5][6][8][9][1][4][3]|
5 |[3][8][6][7][9][1][2][5][4]|
6 |[4][9][7][8][1][2][3][6][5]|
7 |[5][1][8][9][2][3][4][7][6]|
8 |[6][2][9][1][3][4][5][8][7]|

swap columns 2 and 5...
    7  3  1  5  4  2  6  9  8
9 |[7][3][1][5][4][2][6][9][8]|
1 |[8][4][2][6][5][3][7][1][9]|
2 |[9][5][3][7][6][4][8][2][1]|
3 |[1][6][4][8][7][5][9][3][2]|
4 |[2][7][5][9][8][6][1][4][3]|
5 |[3][8][6][1][9][7][2][5][4]|
6 |[4][9][7][2][1][8][3][6][5]|
7 |[5][1][8][3][2][9][4][7][6]|
8 |[6][2][9][4][3][1][5][8][7]|

swap columns 4 and 2...
    7  3  1  5  2  4  6  9  8
9 |[7][3][1][5][2][4][6][9][8]|
1 |[8][4][2][6][3][5][7][1][9]|
2 |[9][5][3][7][4][6][8][2][1]|
3 |[1][6][4][8][5][7][9][3][2]|
4 |[2][7][5][9][6][8][1][4][3]|
5 |[3][8][6][1][7][9][2][5][4]|
6 |[4][9][7][2][8][1][3][6][5]|
7 |[5][1][8][3][9][2][4][7][6]|
8 |[6][2][9][4][1][3][5][8][7]|

swap columns 4 and 9...
    7  3  1  5  2  9  6  4  8
9 |[7][3][1][5][2][9][6][4][8]|
1 |[8][4][2][6][3][1][7][5][9]|
2 |[9][5][3][7][4][2][8][6][1]|
3 |[1][6][4][8][5][3][9][7][2]|
4 |[2][7][5][9][6][4][1][8][3]|
5 |[3][8][6][1][7][5][2][9][4]|
6 |[4][9][7][2][8][6][3][1][5]|
7 |[5][1][8][3][9][7][4][2][6]|
8 |[6][2][9][4][1][8][5][3][7]|

swap columns 4 and 8...
    7  3  1  5  2  9  6  8  4
9 |[7][3][1][5][2][9][6][8][4]|
1 |[8][4][2][6][3][1][7][9][5]|
2 |[9][5][3][7][4][2][8][1][6]|
3 |[1][6][4][8][5][3][9][2][7]|
4 |[2][7][5][9][6][4][1][3][8]|
5 |[3][8][6][1][7][5][2][4][9]|
6 |[4][9][7][2][8][6][3][5][1]|
7 |[5][1][8][3][9][7][4][6][2]|
8 |[6][2][9][4][1][8][5][7][3]|

columns are now in the right order; now swap rows...
swap rows 1 and 6...
    7  3  1  5  2  9  6  8  4
9 |[7][3][1][5][2][9][6][8][4]|
6 |[4][9][7][2][8][6][3][5][1]|
2 |[9][5][3][7][4][2][8][1][6]|
3 |[1][6][4][8][5][3][9][2][7]|
4 |[2][7][5][9][6][4][1][3][8]|
5 |[3][8][6][1][7][5][2][4][9]|
1 |[8][4][2][6][3][1][7][9][5]|
7 |[5][1][8][3][9][7][4][6][2]|
8 |[6][2][9][4][1][8][5][7][3]|

swap rows 2 and 1...
    7  3  1  5  2  9  6  8  4
9 |[7][3][1][5][2][9][6][8][4]|
6 |[4][9][7][2][8][6][3][5][1]|
1 |[8][4][2][6][3][1][7][9][5]|
3 |[1][6][4][8][5][3][9][2][7]|
4 |[2][7][5][9][6][4][1][3][8]|
5 |[3][8][6][1][7][5][2][4][9]|
2 |[9][5][3][7][4][2][8][1][6]|
7 |[5][1][8][3][9][7][4][6][2]|
8 |[6][2][9][4][1][8][5][7][3]|

swap rows 3 and 5...
    7  3  1  5  2  9  6  8  4
9 |[7][3][1][5][2][9][6][8][4]|
6 |[4][9][7][2][8][6][3][5][1]|
1 |[8][4][2][6][3][1][7][9][5]|
5 |[3][8][6][1][7][5][2][4][9]|
4 |[2][7][5][9][6][4][1][3][8]|
3 |[1][6][4][8][5][3][9][2][7]|
2 |[9][5][3][7][4][2][8][1][6]|
7 |[5][1][8][3][9][7][4][6][2]|
8 |[6][2][9][4][1][8][5][7][3]|

swap rows 4 and 7...
    7  3  1  5  2  9  6  8  4
9 |[7][3][1][5][2][9][6][8][4]|
6 |[4][9][7][2][8][6][3][5][1]|
1 |[8][4][2][6][3][1][7][9][5]|
5 |[3][8][6][1][7][5][2][4][9]|
7 |[5][1][8][3][9][7][4][6][2]|
3 |[1][6][4][8][5][3][9][2][7]|
2 |[9][5][3][7][4][2][8][1][6]|
4 |[2][7][5][9][6][4][1][3][8]|
8 |[6][2][9][4][1][8][5][7][3]|

swap rows 3 and 4...
    7  3  1  5  2  9  6  8  4
9 |[7][3][1][5][2][9][6][8][4]|
6 |[4][9][7][2][8][6][3][5][1]|
1 |[8][4][2][6][3][1][7][9][5]|
5 |[3][8][6][1][7][5][2][4][9]|
7 |[5][1][8][3][9][7][4][6][2]|
4 |[2][7][5][9][6][4][1][3][8]|
2 |[9][5][3][7][4][2][8][1][6]|
3 |[1][6][4][8][5][3][9][2][7]|
8 |[6][2][9][4][1][8][5][7][3]|

swap rows 2 and 3...
    7  3  1  5  2  9  6  8  4
9 |[7][3][1][5][2][9][6][8][4]|
6 |[4][9][7][2][8][6][3][5][1]|
1 |[8][4][2][6][3][1][7][9][5]|
5 |[3][8][6][1][7][5][2][4][9]|
7 |[5][1][8][3][9][7][4][6][2]|
4 |[2][7][5][9][6][4][1][3][8]|
3 |[1][6][4][8][5][3][9][2][7]|
2 |[9][5][3][7][4][2][8][1][6]|
8 |[6][2][9][4][1][8][5][7][3]|

swap rows 2 and 8...
    7  3  1  5  2  9  6  8  4
9 |[7][3][1][5][2][9][6][8][4]|
6 |[4][9][7][2][8][6][3][5][1]|
1 |[8][4][2][6][3][1][7][9][5]|
5 |[3][8][6][1][7][5][2][4][9]|
7 |[5][1][8][3][9][7][4][6][2]|
4 |[2][7][5][9][6][4][1][3][8]|
3 |[1][6][4][8][5][3][9][2][7]|
8 |[6][2][9][4][1][8][5][7][3]|
2 |[9][5][3][7][4][2][8][1][6]|

Do we have the same completed sudoku?
After putting back the demarcations...
    7  3  1   5  2  9   6  8  4
  +---------+---------+---------+
9 |[7][3][1]|[5][2][9]|[6][8][4]|
6 |[4][9][7]|[2][8][6]|[3][5][1]|
1 |[8][4][2]|[6][3][1]|[7][9][5]|
  +---------+---------+---------+
5 |[3][8][6]|[1][7][5]|[2][4][9]|
7 |[5][1][8]|[3][9][7]|[4][6][2]|
4 |[2][7][5]|[9][6][4]|[1][3][8]|
  +---------+---------+---------+
3 |[1][6][4]|[8][5][3]|[9][2][7]|
8 |[6][2][9]|[4][1][8]|[5][7][3]|
2 |[9][5][3]|[7][4][2]|[8][1][6]|
  +---------+---------+---------+
  
  pasting the original... 
  +---------+---------+---------+
  |[7][3][1]|[5][2][9]|[6][8][4]|
  |[4][5][9]|[8][3][6]|[7][2][1]|
  |[8][2][6]|[4][7][1]|[3][5][9]|
  +---------+---------+---------+
  |[3][6][4]|[2][1][8]|[9][7][5]|
  |[5][1][7]|[6][9][3]|[8][4][2]|
  |[2][9][8]|[7][4][5]|[1][6][3]|
  +---------+---------+---------+
  |[1][7][5]|[9][8][4]|[2][3][6]|
  |[6][8][3]|[1][5][2]|[4][9][7]|
  |[9][4][2]|[3][6][7]|[5][1][8]|
  +---------+---------+---------+

Not the same! Though we've made the first row and first column identical by swapping, there are still issues; what's more is the swapped one has repetitions in blocks!
Group theory approach might not be the way to go :C

Just for curiosities sake (the rover, of course), what happens if we "unjumble" the original backwards?
    a  b  c  d  e  f  g  h  i
a |[7][3][1][5][2][9][6][8][4]|
b |[4][5][9][8][3][6][7][2][1]|
c |[8][2][6][4][7][1][3][5][9]|
d |[3][6][4][2][1][8][9][7][5]|
e |[5][1][7][6][9][3][8][4][2]|
f |[2][9][8][7][4][5][1][6][3]|
g |[1][7][5][9][8][4][2][3][6]|
h |[6][8][3][1][5][2][4][9][7]|
i |[9][4][2][3][6][7][5][1][8]|

swap columns h and i...
    a  b  c  d  e  f  g  i  h
a |[7][3][1][5][2][9][6][4][8]|
b |[4][5][9][8][3][6][7][1][2]|
c |[8][2][6][4][7][1][3][9][5]|
d |[3][6][4][2][1][8][9][5][7]|
e |[5][1][7][6][9][3][8][2][4]|
f |[2][9][8][7][4][5][1][3][6]|
g |[1][7][5][9][8][4][2][6][3]|
h |[6][8][3][1][5][2][4][7][9]|
i |[9][4][2][3][6][7][5][8][1]|

swap columns a and i...
    i  b  c  d  e  f  g  a  h
a |[4][3][1][5][2][9][6][7][8]|
b |[1][5][9][8][3][6][7][4][2]|
c |[9][2][6][4][7][1][3][8][5]|
d |[5][6][4][2][1][8][9][3][7]|
e |[2][1][7][6][9][3][8][5][4]|
f |[3][9][8][7][4][5][1][2][6]|
g |[6][7][5][9][8][4][2][1][3]|
h |[7][8][3][1][5][2][4][6][9]|
i |[8][4][2][3][6][7][5][9][1]|

swap columns d and f...
    i  b  c  f  e  d  g  a  h
a |[4][3][1][9][2][5][6][7][8]|
b |[1][5][9][6][3][8][7][4][2]|
c |[9][2][6][1][7][4][3][8][5]|
d |[5][6][4][8][1][2][9][3][7]|
e |[2][1][7][3][9][6][8][5][4]|
f |[3][9][8][5][4][7][1][2][6]|
g |[6][7][5][4][8][9][2][1][3]|
h |[7][8][3][2][5][1][4][6][9]|
i |[8][4][2][7][6][3][5][9][1]|

swap columns i and e...
    e  b  c  f  i  d  g  a  h
a |[2][3][1][9][4][5][6][7][8]|
b |[3][5][9][6][1][8][7][4][2]|
c |[7][2][6][1][9][4][3][8][5]|
d |[1][6][4][8][5][2][9][3][7]|
e |[9][1][7][3][2][6][8][5][4]|
f |[4][9][8][5][3][7][1][2][6]|
g |[8][7][5][4][6][9][2][1][3]|
h |[5][8][3][2][7][1][4][6][9]|
i |[6][4][2][7][8][3][5][9][1]|

swap columns b and f...
    e  f  c  b  i  d  g  a  h
a |[2][9][1][3][4][5][6][7][8]|
b |[3][6][9][5][1][8][7][4][2]|
c |[7][1][6][2][9][4][3][8][5]|
d |[1][8][4][6][5][2][9][3][7]|
e |[9][3][7][1][2][6][8][5][4]|
f |[4][5][8][9][3][7][1][2][6]|
g |[8][4][5][7][6][9][2][1][3]|
h |[5][2][3][8][7][1][4][6][9]|
i |[6][7][2][4][8][3][5][9][1]|

swap columns e and c...
    c  f  e  b  i  d  g  a  h
a |[1][9][2][3][4][5][6][7][8]|
b |[9][6][3][5][1][8][7][4][2]|
c |[6][1][7][2][9][4][3][8][5]|
d |[4][8][1][6][5][2][9][3][7]|
e |[7][3][9][1][2][6][8][5][4]|
f |[8][5][4][9][3][7][1][2][6]|
g |[5][4][8][7][6][9][2][1][3]|
h |[3][2][5][8][7][1][4][6][9]|
i |[2][7][6][4][8][3][5][9][1]|

swap columns c and f...
    f  c  e  b  i  d  g  a  h
a |[9][1][2][3][4][5][6][7][8]|
b |[6][9][3][5][1][8][7][4][2]|
c |[1][6][7][2][9][4][3][8][5]|
d |[8][4][1][6][5][2][9][3][7]|
e |[3][7][9][1][2][6][8][5][4]|
f |[5][8][4][9][3][7][1][2][6]|
g |[4][5][8][7][6][9][2][1][3]|
h |[2][3][5][8][7][1][4][6][9]|
i |[7][2][6][4][8][3][5][9][1]|

swap rows b and c...
    f  c  e  b  i  d  g  a  h
a |[9][1][2][3][4][5][6][7][8]|
b |[6][9][3][5][1][8][7][4][2]|
c |[1][6][7][2][9][4][3][8][5]|
d |[8][4][1][6][5][2][9][3][7]|
e |[3][7][9][1][2][6][8][5][4]|
f |[5][8][4][9][3][7][1][2][6]|
g |[4][5][8][7][6][9][2][1][3]|
h |[2][3][5][8][7][1][4][6][9]|
i |[7][2][6][4][8][3][5][9][1]|

Just un-jumbling the columns reveals that there are incongruities in the table to form an Z/9Z arithmetic with each number being "itself" so-to-speak; it may be the case that we CAN
get back to Z/9Z by "swapping" the identity of the numbers; eg making all 9s become 1s, 2s become 7s etc. We'd have to find the particular automorphism that worked though.